Team Members:
Renee Joyal
Jacob Weikert

Exercise Part B (15 pts)

public interface IRentable {
	public void rent();
}
public abstract class Vehicle implements IRentable {
	…
}
public class Truck extends Vehicle {
	public UnlimitedNatural weight;
	public UnlimitedNatural power;
	public String manufacturer;
	public String regNo;
}
public class Car extends Vehicle {
	public CarKind kind;
	public UnlimitedNatural noSeats;
	public UnlimitedNatural power;
	public String manufacturer;
	public String regNo;
}
public class Motorbike extends Vehicle {
	public MbKind kind;
	public UnlimitedNatural cylinderCap;
	public UnlimitedNatural power;
	public String manufacturer;
	public String regNo;
}
public class Company {
	public String name;
	public Address headquarters;
	public Truck t;
	public Car c;
	public Motorbike m;
	public Customer cstmr;
	public Employee e;
	public vrs = new VehicleRentalService();
}
public abstract class Service {
	public Customer customer;
}
public class VehicleRentalService extends Service {
	public Vehicle vehicle;
	public void offerCar();
	public void offerMotorbike();
	public void offerTruck();
}
public class Address {
	public String street;
	public String postalCode;
	public String city;
}
public abstract class Person {
	public String name;
	public String email;
	public Address a;
}
public class Customer extends Person {
	public account = new BankAccount();
}
public class Employee extends Person {
	...
}

// We cannot inherit from 2 classes in Java as it can cause errors if the fields/behaviors of both 
// classes have the same names. To address this issue we will assume Customer/Employee 
// classes did not manipulate any of the data inherited from Person and we ourselves will write 
// subcontractor as just inheriting from Person.

public class Subcontractor extends Person {
	…
}
public class BankAccount {
	public UnlimitedNatural number;
	public String depositor;
	public String bank;
}
